def get_words_from_hidden(num_words=10, num_layers=5):
  # Input: number of words, number of hidden layers
  # Output: prints the top words associated with the hidden layers

  # Sort the observation matrix by probabilities
  srtd = np.copy(hmm.O)
  nnn_srtd = len(srtd)
  indices = np.argsort(-srtd)
  for i in range(nnn_srtd):
    srtd[i] = sorted(srtd[i], reverse=True)
  
  # Print the num_words words most associated 
  # with the first num_layers hidden layers
  num_words = 10
  word_map = Utility.load_word_map_hidden()[1]
  flip_dict = dict((v,k) for k,v in word_map.items())
  for i in range(num_layers):
    print("Hidden layer: {}".format(i+1))
    for j in range(num_words):
      print(flip_dict[indices[i][j]], end="")
      print(" ")
    print("\n")

get_words_from_hidden()
